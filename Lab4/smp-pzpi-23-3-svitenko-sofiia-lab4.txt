Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З лабораторної роботи №4
з дисципліни «Скриптові мови програмування»









Виконав									Перевірив
ст.гр ПЗПІ-23-3 Світенко С.М.					ст. в. Сокорчук І.П.







Харків 2025
1.1  Мета роботи
     
     
     Навчитися масштабувати код програм, працювати з формами, здійснювати авторизацію та обмеження прав доступу.
     
     
1.2  Хід роботи
     У цій лабораторній роботі для підключення списку продуктів замість використання JSON-файлу, як у попередній роботі, застосовується СУБД SQLite. Для переходу на роботу з базою даних необхідно було встановити SQLite локально та створити клас-конектор, який забезпечує інтерфейс для взаємодії з PDO
       01: <?php
       02: class DatabaseConnector
       03: {
       04:     private $pdo;
       05: 
       06:     public function __construct($path)
       07:     {
       08:         $absolutePath = realpath(__DIR__ . "/../" . $path);
       09: 
       10:         if (!file_exists($absolutePath)) {
       11:             throw new Exception("not found: $absolutePath");
       12:         }
       13: 
       14:         $this->pdo = new PDO("sqlite:" . $absolutePath);
       15:         $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
       16:     }
       17: 
       18:     public function exec($sql, $params = [])
       19:     {
       20:         $stmt = $this->pdo->prepare($sql);
       21:         return $stmt->execute($params);
       22:     }
       23: 
       24:     public function fetchAll($sql, $params = [])
       25:     {
       26:         $stmt = $this->pdo->prepare($sql);
       27:         $stmt->execute($params);
       28:         return $stmt->fetchAll(PDO::FETCH_ASSOC);
       29:     }
       30: }
       31: 
       32: $database = new DatabaseConnector("db/store.db");
       33: ?>
     У класі DatabaseConnector реалізовано основні методи для роботи з базою: виконання SQL-запитів, отримання всіх записів, а також ініціалізація підключення до файлу бази даних. Наприкінці створюється глобальний об’єкт цього класу, який у подальшому використовується у класі Program.
     Далі йде код ініціалізації, де перевіряється наявність необхідної таблиці в базі даних, а також, за потреби, виконується початкове наповнення таблиці продуктами. Якщо таблиця порожня, до неї додаються кілька товарів із назвами та цінами. Після цього створюється екземпляр класу GroceryStore, якому передається підключення до бази даних. Також ініціалізується сесія та масив cart, у який для кожного продукту встановлюється початкова кількість.
       01: <?php
       02: include_once("classes.php");
       03: 
       04: $database->exec("
       05:     create table if not exists products (
       06:         id integer primary key autoincrement, name text not null, price integer not null
       07:     )
       08: ");
       09: 
       10: $results = $database->fetchAll("select count(*) as count from products");
       11: $count = (int) $results[0]['count'];
       12: 
       13: if ($count == 0) {
       14:     $database->exec("
       15:         insert into products 
       16:         (name, price) 
       17:         values
       18:         ('Молоко пастеризоване', 12),
       19:         ('Хліб чорний', 9),
       20:         ('Сир білий', 21),
       21:         ('Сметана 20%', 25),
       22:         ('Кефір 1%', 19),
       23:         ('Вода газована', 25),
       24:         ('Печиво \"Весна\"', 25);
       25:     ");
       26: }
       27: 
       28: $program = new GroceryStore($database);
       29: 
       30: if (session_status() === PHP_SESSION_NONE) {
       31:     session_start();
       32: 
       33:     if (!isset($_SESSION['cart'])) {
       34:         $_SESSION['cart'] = [];
       35:     
       36:         foreach ($program->products as $id => $item) {
       37:             $_SESSION['cart'][$id] = 0;
       38:         }
       39:     }
       40: }
       41: ?>
     
     Клас Program також був змінений: тепер для отримання списку всіх продуктів використовується SQL-запит SELECT * FROM products, а не зчитування з JSON-файлу. Це дозволяє динамічно отримувати актуальні дані з бази при кожному запуску програми
       10: class GroceryStore {
       11:     public array $products = [];
       12: 
       13:     public function __construct($database) {
       14:         $this->loadProducts($database);
       15:     }
       16: 
       17:     private function loadProducts($database): void {
       18:         $databaseData = $database->fetchAll("SELECT * FROM products");
       19: 
       20:         foreach ($databaseData as $productData) {
       21:             $this->products[] = new Product($productData['id'], $productData['name'], $productData['price']);
       22:         }
       23:     }
       24: }
       
       
1.3  Рішення завдання до лабораторної роботи.
     
     
     Прибрати дублювання шапки та підвалу сайту.
     В ході виконання минулої лабораторної роботи, вже було прибрано дублювання самого коду шапки та підвалу. Але в цій лабортаорній роботі було реалізовано базову маршрутизацію за допомогою switch змінної, та параметру запиту в URL з ім’ям page в файлі index.php.
     Сторінка логіну для незареєстрованих користувачів.
     Першим завданням в цьому пункті є зміна хедеру. Якщо користувач не зареєстрований, то йому має бути доступним кнопка логіну, в іншому випадку профіль, кошик та логаут. 
       01: <?php
       02: require_once("./db/dbaccess.php");
       03: require_once("initializeApp.php");
       04: ?>
       05: 
       06: <!DOCTYPE html>
       07: <html lang="uk">
       08: 
       09: <head>
       10:     <meta charset="UTF-8">
       11:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
       12:     <meta name="description" content="Welcome to our online store">
       13:     <title>Інтернет Магазин - Головна</title>
       14: 
       15:     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
       16:     <link rel="stylesheet" href="./styles/style.css">
       17: </head>
       18: <body>
       19:     <?php require("header.php"); ?>
       20: 
       21:     <?php
       22:     $page = isset($_GET['page']) ? $_GET['page'] : 'home';
       23:     switch ($page) {
       24:         case "loginpage":
       25:             require_once("loginpage.php");
       26:             break;
       27:         case "homepage":
       28:             require_once("homepage.php");
       29:             break;
       30:         case "cartpage":
       31:             require_once("cartpage.php");
       32:             break;
       33:         case "profilepage":
       34:             require_once("profilepage.php");
       35:             break;
       36:         case "productspage":
       37:             require_once("productspage.php");
       38:             break;
       39:         default:
       40:             require_once("page404.php");
       41:             break;
       42:     }
       43:     ?>
       44:     </div>
       45: 
       46:     <?php require("footer.php"); ?>
       47: </body>
       48: 
       49: </html>
     У цьому коді за допомогою звернення до сесії перевіряється, чи авторизований користувач. Якщо у сесії відсутній запис про ім’я користувача ($_SESSION['username']), скрипт автоматично перенаправляє відвідувача на сторінку входу.
     Такий підхід використовується для захисту сторінок продуктів і кошика від несанкціонованого доступу. Відповідний код перевірки додається на початок кожної захищеної сторінки, щоб лише авторизовані користувачі могли переглядати та взаємодіяти з цими розділами сайту.
       43: <?php
       44:     if(!isset($_SESSION['username'])){
       45:         header("Location: ./index.php?page=loginpage");
       46:     }
       47: ?>
     Далі необхідно було створити окремий файл credentials.php, у якому зберігаються логіни та паролі користувачів, що мають доступ до системи. Це дозволяє уникнути зберігання облікових даних у базі даних і спрощує керування списком авторизованих користувачів. У цьому файлі дані про логін і пароль зберігаються у вигляді масиву, який підключається до скриптів для перевірки під час входу в систему.
       1: <?php
       2: global $credentials;
       3: 
       4: $credentials = [
       5:     'username' => 'splushka',
       6:     'password' => 'splushka_123',
       7: ];
       8: 
       9: ?>
Login:
       01: <?php
       02:     include_once("./credentials.php"); 
       03:     if ($_SERVER['REQUEST_METHOD'] === 'POST'){
       04:         session_start();
       05:         if($credentials['username'] != $_POST['username'] || $credentials['password'] != $_POST['password'])
       06:         {
       07:             $_SESSION['login_error'] = true;
       08:             header("Location: ./index.php?page=loginpage");
       09:             exit();
       10:         }
       11:         $_SESSION['username'] = $_POST['username'];
       12:         $_SESSION['authorized_at'] = time();
       13: 
       14:         header("Location: ./index.php?page=profilepage");
       15:         exit();
       16:     }
       17: ?>
       18: 
       19: 
       20: <?php
       21:     if(isset($_SESSION['login_error'])){
       22:         echo "<p style='color:red'>Неправильні дані</p>";
       23:     }
       24: 
       25:     unset($_SESSION['login_error']);
       26: ?>
       27: <link rel="stylesheet" href="./styles/login.css">
       28: <div style="margin: 20px auto;">
       29:     <h1>Увійдіть в акаунт</h1>
       30: </div>
       31: <form method="POST" action="loginpage.php" id="login-form">
       32:     <label for="username" id="username-label">Ім'я користувача</label>
       33:     <input id="username" type="text" name="username" required>
       34: 
       35:     <label for="password" id="password-label">Пароль</label>
       36:     <input id="password" type="password" name="password" required>
       37: 
       38:     <button type="submit" id="submit-button">Увійти в акаунт</button>
       39: </form>
       40: 
Цей код реалізує просту сторінку авторизації користувача.
     Перевірка даних:
     При надсиланні форми (метод POST) відбувається перевірка введених логіна і пароля з даними, які зберігаються у файлі credentials.php. Якщо дані не співпадають, у сесії встановлюється прапорець про помилку входу, і користувача перенаправляють назад на сторінку входу.
     Авторизація:
     Якщо логін і пароль введені правильно, у сесії зберігається ім’я користувача та час авторизації. Після цього користувача перенаправляють на сторінку профілю.
     Відображення помилок:
     Якщо була спроба входу з неправильними даними, на сторінці відображається повідомлення про помилку червоним кольором. Після виведення повідомлення прапорець помилки видаляється із сесії.
     Форма входу:
     На сторінці розміщується форма з двома полями: ім’я користувача та пароль. Всі поля обов’язкові для заповнення. Для стилізації підключається окремий CSS-файл.
     Таким чином, код забезпечує базову аутентифікацію користувача з перевіркою введених даних, обробкою помилок і захистом від несанкціонованого доступу.
Logout:
       01: <?php
       02: session_start();
       03: 
       04: include_once('./profile.php');
       05: include_once('./credentials.php');
       06: 
       07: if ($_SERVER['REQUEST_METHOD'] === 'POST') {
       08:     unset($_SESSION['username']);
       09:     unset($_SESSION['authorized_at']);
       10:     unset($credentials);
       11:     unset($_SESSION['cart']);
       12:     unset($_SESSION['profile']);
       13:     unset($profile);
       14: 
       15:     header("Location: ../index.php?page=loginpage");
       16: }
     Останній функціональний пункт — це кнопка "Вийти" (logout), яка доступна лише авторизованим користувачам. При натисканні на цю кнопку виконується спеціальний код, що повністю очищає сесію користувача. За допомогою команди unset() видаляються всі основні дані сесії: ім’я користувача, час авторизації, масив із товарами в кошику, профіль користувача, а також відповідні змінні, які могли бути використані під час роботи. Після цього користувача автоматично перенаправляють на сторінку входу, що гарантує повний вихід із системи та захист особистої інформації.
1.4  Сторінка профілю користувача
     Для реалізації цього завдання був створений глобальний масив, який зберігається у сесії у файлі profile.php, щоб дані користувача не втрачалися між різними запитами. На сторінці профілю розміщено дві окремі форми: одна призначена для редагування особистих даних (ім’я, прізвище, короткий опис та дата народження), а інша — для завантаження зображення профілю. Якщо під час валідації текстової форми виникають помилки, користувач отримує відповідне повідомлення через сесію. Це дозволяє йому побачити, які саме поля заповнені некоректно, і виправити їх без втрати вже введених даних.
       001: <?php
       002: function validateUserData($data) {
       003:     $errors = [];
       004: 
       005:     if (empty(trim($data['first']))) {
       006:         $errors[] = "Ім'я не може бути порожнім";
       007:     } elseif (strlen(trim($data['first'])) <= 1) {
       008:         $errors[] = "Ім'я має містити більше одного символу";
       009:     }
       010: 
       011:     if (empty(trim($data['last']))) {
       012:         $errors[] = "Прізвище не може бути порожнім";
       013:     } elseif (strlen(trim($data['last'])) <= 1) {
       014:         $errors[] = "Прізвище має містити більше одного символу";
       015:     }
       016: 
       017:     if (empty($data['birth'])) {
       018:         $errors[] = "Дата народження обов'язкова";
       019:     } else {
       020:         $dob = new DateTime($data['birth']);
       021:         $now = new DateTime();
       022:         $years = $dob->diff($now)->y;
       023: 
       024:         if ($years < 16) {
       025:             $errors[] = "Вам має бути не менше 16 років";
       026:         }
       027:     }
       028: 
       029:     if (empty(trim($data['bio']))) {
       030:         $errors[] = "Опис не може бути порожнім";
       031:     } elseif (strlen(trim($data['bio'])) < 50) {
       032:         $errors[] = "Опис має містити не менше 50 символів";
       033:     }
       034: 
       035:     return $errors;
       036: }
       037: 
       038: $profileErrors = [];
       039: $imageErrors = [];
       040: 
       041: if (isset($_POST['updateProfile'])) {
       042:     session_start();
       043:     $userData = [
       044:         'first' => $_POST['name'] ?? '',
       045:         'last' => $_POST['surname'] ?? '',
       046:         'birth' => $_POST['dob'] ?? '',
       047:         'bio' => $_POST['description'] ?? ''
       048:     ];
       049: 
       050:     $profileErrors = validateUserData($userData);
       051: 
       052:     if (empty($profileErrors)) {
       053:         $profile = $_SESSION['profile'] ?? [];
       054: 
       055:         $profile['name'] = trim($userData['first']);
       056:         $profile['surname'] = trim($userData['last']);
       057:         $profile['dob'] = $userData['birth'];
       058:         $profile['description'] = trim($userData['bio']);
       059: 
       060:         $_SESSION['profile'] = $profile;
       061:         $_SESSION['success_message'] = "Дані профілю успішно оновлено";
       062: 
       063:         header("Location: ./index.php?page=profilepage");
       064:         exit();
       065:     } else {
       066:         $_SESSION['temp_profile_data'] = $userData;
       067:         $_SESSION['profile_errors'] = $profileErrors;
       068: 
       069:         header("Location: ./index.php?page=profilepage");
       070:         exit();
       071:     }
       072: }
       073: 
       074: if (isset($_POST['uploadImage'])) {
       075:     session_start();
       076:     if (isset($_FILES['profilePicture']) && $_FILES['profilePicture']['error'] === UPLOAD_ERR_OK) {
       077:         $tempPath = $_FILES['profilePicture']['tmp_name'];
       078:         $originalName = $_FILES['profilePicture']['name'];
       079:         $ext = strtolower(pathinfo($originalName, PATHINFO_EXTENSION));
       080:         $targetDir = __DIR__ . './assets/';
       081:         if (!is_dir($targetDir)) {
       082:             mkdir($targetDir, 0755, true);
       083:         }
       084: 
       085:         $uniqueName = uniqid('profile_', true) . '.' . $ext;
       086:         $targetPath = $targetDir . $uniqueName;
       087: 
       088:         if (move_uploaded_file($tempPath, $targetPath)) {
       089:             $profile = $_SESSION['profile'] ?? [];
       090:             $profile['image'] = 'assets/' . $uniqueName;
       091:             $_SESSION['profile'] = $profile;
       092:             $_SESSION['success_message'] = "Зображення профілю успішно оновлено";
       093:         } else {
       094:             $imageErrors[] = "Помилка при завантаженні зображення";
       095:             $_SESSION['image_errors'] = $imageErrors;
       096:         }
       097:         
       098:     } else {
       099:         $imageErrors[] = "Будь ласка, виберіть зображення";
       100:         $_SESSION['image_errors'] = $imageErrors;
       101:     }
       102: 
       103:     header("Location: ./index.php?page=profilepage");
       104:     exit();
       105: }
       106: 
       107: $profileErrors = $_SESSION['profile_errors'] ?? [];
       108: $imageErrors = $_SESSION['image_errors'] ?? [];
       109: $successMessage = $_SESSION['success_message'] ?? '';
       110: 
       111: unset($_SESSION['profile_errors']);
       112: unset($_SESSION['image_errors']);
       113: unset($_SESSION['success_message']);
       114: 
       115: $profile = $_SESSION['profile'] ?? [];
       116: $tempData = $_SESSION['temp_profile_data'] ?? [];
       117: unset($_SESSION['temp_profile_data']);
       118: 
       119: $first = $tempData['first'] ?? ($profile['name'] ?? '');
       120: $last = $tempData['last'] ?? ($profile['surname'] ?? '');
       121: $birth = $tempData['birth'] ?? ($profile['dob'] ?? '');
       122: $bio = $tempData['bio'] ?? ($profile['description'] ?? '');
       123: $imagePath = $profile['image'] ?? null;
       124: ?>
       125: 
       126: <link rel="stylesheet" href="./styles/profile.css">
       127: <div class="profile-container">
       128:     <h1>User Profile</h1>
       129: 
       130:     <?php if ($successMessage): ?>
       131:         <div class="success-message"><?= htmlspecialchars($successMessage) ?></div>
       132:     <?php endif; ?>
       133: 
       134:     <div class="profile-form-container">
       135:         <div class="image-form-container">
       136:             <h2>Profile Picture</h2>
       137: 
       138:             <?php if (!empty($imageErrors)): ?>
       139:                 <div class="error-messages">
       140:                     <?php foreach ($imageErrors as $err): ?>
       141:                         <p class="error"><?= htmlspecialchars($err) ?></p>
       142:                     <?php endforeach; ?>
       143:                 </div>
       144:             <?php endif; ?>
       145: 
       146:             <form action="profilepage.php" method="POST" enctype="multipart/form-data" class="image-form">
       147:                 <div class="image-preview">
       148:                     <?php if ($imagePath): ?>
       149:                         <img src="<?= htmlspecialchars($imagePath) ?>" alt="Profile Picture">
       150:                     <?php else: ?>
       151:                         <div class="placeholder">Немає зображення</div>
       152:                     <?php endif; ?>
       153:                 </div>
       154:                 <div class="file-input-container">
       155:                     <input type="file" id="profilePicture" name="profilePicture" accept="image/jpeg,image/png,image/gif">
       156:                     <button type="submit" name="uploadImage">Зберегти зображення</button>
       157:                 </div>
       158:             </form>
       159:         </div>
       160: 
       161:         <div class="profile-form-container">
       162:             <h2>Personal Information</h2>
       163: 
       164:             <?php if (!empty($profileErrors)): ?>
       165:                 <div class="error-messages">
       166:                     <?php foreach ($profileErrors as $err): ?>
       167:                         <p class="error"><?= htmlspecialchars($err) ?></p>
       168:                     <?php endforeach; ?>
       169:                 </div>
       170:             <?php endif; ?>
       171: 
       172:             <form action="profilepage.php" method="POST" class="profile-form">
       173:                 <div class="row">
       174:                     <div class="form-group">
       175:                         <label for="name">Ім'я:</label>
       176:                         <input type="text" id="name" name="name" value="<?= htmlspecialchars($first) ?>">
       177:                     </div>
       178: 
       179:                     <div class="form-group">
       180:                         <label for="surname">Прізвище:</label>
       181:                         <input type="text" id="surname" name="surname" value="<?= htmlspecialchars($last) ?>">
       182:                     </div>
       183:                 </div>
       184: 
       185:                 <div class="form-group">
       186:                     <label for="dob">Дата народження:</label>
       187:                     <input type="date" id="dob" name="dob" value="<?= htmlspecialchars($birth) ?>">
       188:                 </div>
       189: 
       190:                 <div class="form-group">
       191:                     <label for="description">Короткий опис:</label>
       192:                     <textarea id="description" name="description" rows="7"><?= htmlspecialchars($bio) ?></textarea>
       193:                 </div>
       194: 
       195:                 <div class="buttons">
       196:                     <button type="submit" name="updateProfile">Зберегти</button>
       197:                 </div>
       198:             </form>
       199:         </div>
       200:     </div>
       201: </div>
       202: 
     Цей код реалізує функціонал сторінки профілю користувача з можливістю редагування особистих даних та завантаження аватару.
     Валідація даних профілю: 
     Для перевірки коректності введених користувачем даних використовується функція validateUserData. Вона перевіряє, що ім’я та прізвище не порожні та містять більше одного символу, дата народження заповнена і користувачеві не менше 16 років, а також що опис профілю не коротший за 50 символів. Усі знайдені помилки збираються в масив.
     Оновлення профілю: 
     При надсиланні форми редагування профілю (кнопка "Зберегти") дані проходять валідацію. Якщо помилок немає, інформація зберігається у сесії, а користувач отримує повідомлення про успішне оновлення. Якщо ж є помилки, введені дані та повідомлення про помилки також зберігаються у сесії для повторного відображення на сторінці.
     Завантаження зображення профілю:
     Код обробляє завантаження файлу через форму з типом multipart/form-data. Після перевірки, що файл дійсно обраний і не виникло помилок при завантаженні, зображення зберігається у папці assets/ з унікальним ім’ям. Шлях до зображення записується у сесію, щоб відображати його у профілі. Якщо під час завантаження виникають помилки, вони також зберігаються у сесії для виведення на сторінці.
     Відображення профілю:
     На сторінці профілю виводиться форма для завантаження/зміни зображення, а також окрема форма для редагування особистих даних: ім’я, прізвище, дата народження, короткий опис. Усі поля автоматично підставляються із сесії або з тимчасових даних, якщо попереднє збереження не вдалося через помилки.
     Виведення повідомлень:
     У разі успішного оновлення профілю або зображення, а також при виникненні помилок, відповідні повідомлення відображаються користувачу.
     Таким чином, код забезпечує повний цикл роботи з профілем: перевірку даних, збереження, завантаження аватару та інформування користувача про результат дій.

1.5  Висновок
     У ході виконання цієї лабораторної роботи було реалізовано систему авторизації користувачів, сторінку профілю з можливістю редагування особистих даних та завантаженням фотографії, а також оптимізовано структуру сайту шляхом винесення хедера і футера в окремі файли для уникнення дублювання коду. Під час виконання завдання були здобуті практичні навички роботи з сесіями, формами та обробкою файлів у PHP, що є важливим для створення безпечних, зручних і структурованих веб-застосунків.

     ДОДАТОК А 
     Посилання на відеозахист: https://youtu.be/Z-vTo7bzsCA
00:00 — Вступ: захист лаб. роботи №3 
00:12 — Структура звіту: хід роботи, запуск сервера, побудова сторінок, сторінка товарів, кошик, висновок
00:32 — Додаток A: відеозапис роботи та детальний опис
00:47 — Запуск програми: відкриття магазину, перевірка підключення
01:05 — Головна сторінка: кнопка «Перейти до покупок», перехід до каталогу
01:20 — Каталог: список товарів, можливість додати товари у кошик
01:33 — Введення кількості, перевірка коректності, додавання у кошик
01:55 — Перехід між каталогом і кошиком, збереження товарів у кошику
02:05 — Кошик: відображення ID, назви, ціни, кількості, суми, кнопка «Видалити»
02:14 — Оформлення замовлення: очищення кошика після покупки, повернення до каталогу
02:54 — Завершення демонстрації, перехід до розбору коду
03:31 — Структура проєкту: основні файли (cart.php, classes.php, header, index.php, initialize, products.json)
03:55 — index.php: підключення файлів, ініціалізація, відкриття PHP, HTML-розмітка головної сторінки
04:25 — HTML: шапка, hero section, кнопка на каталог, блоки переваг магазину
05:02 — Підключення footer, закриття сторінки, перехід до коду кошика
05:20 — cart.php: підключення, функції для роботи з кошиком, обробка видалення товарів
06:04 — Очищення кошика, оформлення замовлення, HTML-розмітка кошика
06:43 — Відображення таблиці товарів у кошику, загальна сума, кнопки очищення й оформлення
07:17 — Порожній кошик: повідомлення і посилання на каталог
07:48 — classes.php: класи Product і GroceryStore, завантаження товарів із JSON
08:03 — initialize.app.php: підключення класів, створення об'єкта магазину, запуск сесії, ініціалізація кошика
08:22 — products.php: перевірка кількості товару, обробка POST-запитів, оновлення кошика
09:14 — Валідація кількості, обробка помилок, перенаправлення
09:33 — Оновлення кошика, очищення помилок, відображення каталогу
09:46 — Відображення списку товарів, повідомлення про помилки, форма для додавання у кошик
10:09 — Кнопка додавання, підключення footer, очищення помилок
10:38 — Огляд класичних стилів, хедера
10:50 — Підсумок: index.php — головна, products.php — каталог, cart.php — кошик, classes.php та initialize — структура і сесії

 
     14
     
     
