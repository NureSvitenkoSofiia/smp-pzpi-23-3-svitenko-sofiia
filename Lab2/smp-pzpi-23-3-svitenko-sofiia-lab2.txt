Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З лабораторної роботи №2
з дисципліни «Скриптові мови програмування»









Виконала									Перевірив
ст.гр ПЗПІ-23-3 Світенко С.М.					ст. в. Сокорчук І.П.







Харків 2025
Мета роботи:
     Ознайомитися з основами синтаксису та принципами роботи мови РНР. Отримати практичні навички написання програм скриптовими мовами.
   
1.1  Постановка задачі:
       
     Потрібно створити консольний застосунок «Продовольчий магазин "Весна"».
     
     
1.2  Вимоги до скрипта:
     Після запуску програма повинна показати у терміналі список доступних дій.
     Далі програма чекає, поки користувач введе значення з клавіатури. Якщо введене число не відповідає жодній із запропонованих команд, слід показати повідомлення про помилку та запропонувати ввести інше число.
     Щоб почати купувати товари, потрібно ввести «1». Після цього користувач переходить у режим вибору товарів. На екрані з’являється список продуктів, де кожен рядок містить номер, назву та ціну товару. Для покупки товару потрібно ввести його номер. Якщо номер товару існує у списку, програма попросить вказати кількість одиниць. Якщо номер товару та кількість (менше 100 шт.) введені правильно, товар додається до кошика. Якщо вказати кількість «0», товар буде видалено з кошика. Далі знову виводиться список товарів із пропозицією вибрати наступний. Якщо номер товару введено неправильно, з’явиться повідомлення про помилку, після чого список товарів буде показано ще раз. Для встановлення профілю потрібно ввести «3», після чого програма попросить вказати ваше ім’я та вік.
     Для завершення вибору товарів і повернення до попереднього меню потрібно ввести «0». Щоб переглянути підсумковий рахунок, слід ввести «2». Чек повинен містити: №, назву, ціну, кількість і вартість кожного товару. Наприкінці має бути напис: РАЗОМ ДО СПЛАТИ: сума_за_всі_товари.
     До обмежень відносяться наступні:
     Обраний пункт меню присутній у списку доступних варіантів.
     Вказаний товар є у переліку товарів.
     Введена кількість товару повинна бути більшою за нуль.
     Ім’я користувача має містити принаймні одну літеру.
     Вік користувача повинен бути у межах від 7 до 150 років
     
     
1.3  Реалізація завдання
     
     
     Основні класи.
     Для реалізації цього скрипту було створено два класи:
     Product — клас, який описує товари, доступні для покупки в магазині. Він містить три поля: id, name та price. Для ініціалізації цих полів використовується конструктор.
     GroceryStore — головний клас програми, який реалізує основний функціонал. До його складу входять такі поля: products, username та userAge. Вони необхідні для збереження інформації про вибрані товари та профіль користувача.
     Крім конструктора де проходить ініціалізація програми і файли з json файлу завантажуються в пам’ять, клас GroceryStore містить такі методи: 
     showMenu — приватний метод, який відповідає за виведення головного меню програми. Його роблять приватним, щоб приховати внутрішню логіку, яка не повинна бути доступною за межами класу.
       39:     private function showMenu(): void {
       40:         echo "################################\n";
       41:         echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
       42:         echo "################################\n";
       43:         echo "1 Вибрати товари\n";
       44:         echo "2 Отримати підсумковий рахунок\n";
       45:         echo "3 Налаштувати свій профіль\n";
       46:         echo "0 Вийти з програми\n";
       47:     }
       
     Допоміжні функції strLen та getMaxNameLength використовуються для вирівнювання текстових даних по ширині при виведенні.
     Функція getStringLength працює з рядками у форматі Unicode. Вона використовує preg_split з параметром ‘//u’, що дозволяє коректно рахувати кількість символів у рядку, навіть якщо символи займають два байти (наприклад, для підтримки української мови). Це важливо, оскільки стандартна функція strlen рахує байти, а не символи, а функція mb_strlen може бути недоступною на VPS веб-сервері.
     В свою чергу функція getLongestString буде повертати найдовшу строку, щоб потім робити вирівнювання елементів за їх шириною.
       29:     private function strLen($str)
       30:     {
       31:         $chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);
       32:         return count($chars);
       33:     }
       34: 
       35:     private function getMaxNameLength(): int {
       36:         return max(array_map(fn($p) => $this->strLen($p->name), $this->products));
       37:     }
       
     Функція showProducts призначена для відображення всіх товарів магазину разом із їх цінами, щоб користувач міг обрати потрібні позиції для покупки. У цій функції також реалізовано вирівнювання назв товарів по ширині. Для цього використовуються раніше згадані допоміжні функції. Щоб правильно вирівняти елементи, до назви кожного товару додається стільки пробілів, скільки становить різниця між довжиною найдовшої назви та довжиною поточної назви.
       49:     private function showProducts(): void {
       50:         $maxLen = $this->getMaxNameLength();
       51:         echo "№  НАЗВА" . str_repeat(" ", $maxLen - 5) . "  ЦІНА\n";
       52:         foreach ($this->products as $p) {
       53:             echo $p->id . "  " . $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  " . $p->price . "\n";
       54:         }
       55:         echo "-----------------\n0  ПОВЕРНУТИСЯ\n";
       56:     }
     Функція showCart приймає масив елементів як аргумент і відповідає за відображення вмісту кошика користувача. У цьому методі виводяться назви вибраних товарів та їх кількість згідно з вимогами задачі. Таким чином, користувач може переглянути, які саме товари і в якій кількості він додав до кошика.
       58:     private function showCart(array $cart): void {
       59:         $maxLen = $this->getMaxNameLength();
       60:         echo "У КОШИКУ:\nНАЗВА" . str_repeat(" ", $maxLen - 5) . "  КІЛЬКІСТЬ\n";
       61:         foreach ($this->products as $i => $p) {
       62:             if ($cart[$i] > 0) {
       63:                 echo $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  " . $cart[$i] . "\n\n";
       64:             }
       65:         }
       66:     }
     configureProfile — приватний метод для налаштування профілю користувача. Запитує ім’я користувача в циклі, доки не буде введено хоча б одну літеру (перевірка через регулярний вираз для підтримки Unicode). Якщо введення некоректне, виводить підказку лише після першої помилки. Зберігає ім’я у полі username. Далі у циклі запитує вік користувача, перевіряючи, щоб він був у межах від 7 до 150 років. У разі невірного введення показує відповідне повідомлення, але лише після першої помилки. Зберігає вік у полі userAge. Після успішного введення даних виводить підтвердження створення профілю з іменем та віком користувача.
       076:     private function configureProfile(): void
       077:     {
       078:         $firstTry = true;
       079:         do {
       080:             if (!$firstTry) {
       081:                 echo "Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.\n";
       082:             }
       083:             $name = readline("Ваше імʼя: ");
       084:             $firstTry = false;
       085:         } while (!preg_match('/\p{L}/u', $name));
       086: 
       087:         $this->username = $name;
       088: 
       089:         $firstTry = true;
       090:         do {
       091:             if (!$firstTry) {
       092:                 echo "Користувач не може бути молодшим 7-ми або старшим 150-ти років\n";
       093:             }
       094:             $age = (int)readline("Ваш вік: ");
       095:             $firstTry = false;
       096:         } while ($age < 7 || $age > 150);
       097: 
       098:         $this->userAge = $age;
       099:         echo "Профіль встановлено: {$this->username}, {$this->userAge} років\n\n";
       100:     }
     checkout — приватний метод для формування підсумкового чеку. Приймає масив кошика (cart) як аргумент. Виводить таблицю зі списком товарів у форматі: №, назва (вирівняна за найдовшою назвою), ціна, кількість, вартість. Для форматування використовує допоміжні функції getMaxNameLength (визначення ширини колонки) та strLen (коректний підрахунок символів у рядку). Обчислює загальну суму (total) на основі кількості товарів у кошику та їх цін. Завершує вивід рядком «РАЗОМ ДО СПЛАТИ: $total».
       090:     private function checkout(array $cart): void {
       091:         $maxLen = $this->getMaxNameLength();
       092:         $total = 0;
       093:         echo "№  НАЗВА" . str_repeat(" ", $maxLen - 5) . "  ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
       094:         $n = 1;
       095:         foreach ($this->products as $i => $p) {
       096:             if ($cart[$i] > 0) {
       097:                 $qty = $cart[$i];
       098:                 echo "$n  " . $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  ";
       099:                 echo $this->products[$i]->price . str_repeat(" ", 4 - $this->strLen($this->products[$i]->price)) . "  ";
       100:                 echo $cart[$i] . str_repeat(" ", 9 - $this->strLen($cart[$i])) . "  ";
       101:                 echo $qty * $p->price . "\n";
       102:                 $total += $qty * $p->price;
       103:                 $n++;
       104:             }
       105:         }
       106:         echo "РАЗОМ ДО СПЛАТИ: $total\n\n";
       107:     }
     run — основний публічний метод, який запускає програму та керує її логікою. Створює масив $cart для зберігання кількості вибраних товарів. У нескінченному циклі відображає головне меню (через showMenu) та очікує введення команди від користувача. Реалізує обробку команд за допомогою оператора switch:
     1 — входить у режим вибору товарів:
     Виводить список товарів (showProducts).
     Приймає номер товару та кількість для додавання до кошика.
     Перевіряє коректність введених даних (номер товару, кількість).
     Додає або видаляє товар з кошика, показує поточний стан кошика (showCart).
     Вихід з режиму — введення 0.
     2 — формує та показує підсумковий чек (checkout).
     3 — запускає налаштування профілю користувача (configureProfile).
     0 — завершує роботу програми з повідомленням "До побачення!".
     Інші значення — виводить повідомлення про помилку та пропонує ввести правильну команду.
       109:     public function run(): void {
       110:         $cart = array_fill(0, count($this->products), 0);
       111:         while (true) {
       112:             $this->showMenu();
       113:             $choice = readline("Введіть команду: ");
       114: 
       115:             switch ((int)$choice) {
       116:                 case 1:
       117:                     while (true) {
       118:                         $this->showProducts();
       119:                         $itemId = (int)readline("Виберіть товар: ");
       120:                         if ($itemId === 0) break;
       121: 
       122:                         if ($itemId < 1 || $itemId > count($this->products)) {
       123:                             echo "ПОМИЛКА! Неправильний номер товару\n";
       124:                             continue;
       125:                         }
       126: 
       127:                         $amount = (int)readline("Введіть кількість, штук: ");
       128:                         if ($amount < 0 || $amount > 100) {
       129:                             echo "ПОМИЛКА! Невірна кількість\n";
       130:                             continue;
       131:                         }
       132: 
       133:                         $index = $itemId - 1;
       134:                         $cart[$index] = $amount;
       135:                         if ($amount === 0) {
       136:                             echo "ВИДАЛЯЮ З КОШИКА\n";
       137:                         } else {
       138:                             $this->showCart($cart);
       139:                         }
       140:                     }
       141:                     break;
       142: 
       143:                 case 2:
       144:                     $this->checkout($cart);
       145:                     break;
       146: 
       147:                 case 3:
       148:                     $this->configureProfile();
       149:                     break;
       150: 
       151:                 case 0:
       152:                     echo "До побачення!\n";
       153:                     return;
       154: 
       155:                 default:
       156:                     echo "ПОМИЛКА! Введіть правильну команду\n";
       157:             }
       158:         }
       
1.4  Тестування рішення
Головне меню:
       ################################
       # ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА" #
       ################################
       1 Вибрати товари
       2 Отримати підсумковий рахунок  
       3 Налаштувати свій профіль      
       0 Вийти з програми
       Введіть команду:
       
Відображення списку товарів
       Введіть команду: 1
       №  НАЗВА                 ЦІНА
       1  Молоко пастеризоване  12  
       2  Хліб чорний           9   
       3  Сир білий             21  
       4  Сметана 20%           25  
       5  Кефір 1%              19  
       6  Вода газована         18  
       7  Печиво "Весна"        14  
       -----------------
       0  ПОВЕРНУТИСЯ
       Виберіть товар:
       
     Далі при коректному виборі додається елемент до списку з відповідною кількістю.
       Виберіть товар: 3
       Введіть кількість, штук: 4
       У КОШИКУ:
       НАЗВА                 КІЛЬКІСТЬ
       Сир білий             4
       
Відображення кошику.
       Введіть команду: 2
       №  НАЗВА                 ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ
       1  Сир білий             21    2          42
       2  Кефір 1%              19    1          19
       3  Вода газована         18    1          18
       РАЗОМ ДО СПЛАТИ: 79
Відображення профілю
       Введіть команду: 3
       Ваше імʼя: Sofiia
       Ваш вік: 19
       Профіль встановлено: Sofiia, 19 років
З невалідними:
       Введіть команду: 3
       Ваше імʼя: -1
       Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
       Ваше імʼя: 2
       Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.
       Ваше імʼя: Sofiia
       Ваш вік: -1
       Користувач не може бути молодшим 7-ми або старшим 150-ти років
       Ваш вік: 3
       Користувач не може бути молодшим 7-ми або старшим 150-ти років
       Ваш вік: 19
       Профіль встановлено: Sofiia, 19 років
     Отже, програма виконується згідно з усіма вимогами поставленими в розділі постановка задачі.
     Висновок
     У ході виконання лабораторної роботи №2 було розроблено консольний застосунок на PHP під назвою «Продовольчий магазин "Весна"». Програма реалізує основні можливості віртуального магазину: після запуску користувач отримує доступ до меню з різними опціями — вибір товарів, перегляд підсумкового рахунку, налаштування профілю та вихід із програми. На всіх етапах взаємодії передбачена перевірка коректності введених даних. Робота над цим завданням сприяла закріпленню практичних навичок роботи з введенням та обробкою інформації у PHP, організації логіки меню та побудови взаємодії з користувачем у консольному додатку.

ДОДАТОК А ВІДЕОЗАПИС
     Посилання на відеозахист: https://youtu.be/Tz5UkgTBTro
00:02 — Вступ: захист лаб. роботи №2, мета — ознайомлення з PHP, написання скриптів
00:23 — Структура звіту: хід роботи, вимоги, реалізація, тестування, додатки (опис, структура JSON, код)
00:47 — Демонстрація: запуск програми, підключення до файлу
01:06 — Інтерфейс: меню магазину — вибір товару, підсумковий рахунок, профіль, вихід
01:16 — Налаштування профілю: введення імені, перевірка на валідність
01:29 — Повідомлення про помилку при невалідному імені
01:35 — Введення коректного імені та віку, перевірка віку (7–150 років)
02:00 — Вибір товару, відображення ціни, введення кількості
02:14 — Тестування кейсів: некоректна кількість — повідомлення про помилку
02:44 — Додавання товарів, завершення вибору, отримання підсумкового рахунку
02:58 — Вивід чеку: назва, ціна, кількість, сума, фінальний рахунок
03:29 — Завершення роботи, повідомлення про вихід
03:29 — Перехід до пояснення коду
03:52 — Shebang, відкриття PHP-коду
04:04 — Клас Product: опис товару, конструктор
04:18 — Клас GroceryStore: логіка магазину, властивості (товари, ім’я, вік)
04:52 — Завантаження товарів із JSON, декодування, створення об’єктів Product
05:26 — Метод для підрахунку товарів, визначення макс. довжини назви
06:03 — Метод showMenu: вивід головного меню
06:12 — Метод showProducts: вивід списку товарів, вирівнювання
06:31 — Метод showCart: показ вмісту кошика
06:56 — Метод configProfile: налаштування профілю, перевірки імені та віку
07:44 — Вивід повідомлення про встановлення профілю
07:44 — Метод checkout: підсумковий рахунок, підрахунок суми
08:28 — Метод run: головний цикл, обробка вибору користувача
08:44 — Вибір товару, перевірка номера, кількості, оновлення кошика
09:20 — Видалення з кошика, оновлення
09:37 — Підсумковий рахунок, налаштування профілю
09:49 — Вихід із програми, обробка некоректних команд
10:00 — Створення об’єкта GroceryStore, запуск програми
10:14 — Завершення пояснень, подяка



     ДОДАТОК Б
     Структура JSON файлу з даними
       01: {
       02:     "Items": {
       03:         "1": {
       04:             "name": "Молоко пастеризоване",
       05:             "price": "12"
       06:         },
       07:         "2": {
       08:             "name": "Хліб чорний",
       09:             "price": "9"
       10:         },
       11:         "3": {
       12:             "name": "Сир білий",
       13:             "price": "21"
       14:         },
       15:         "4": {
       16:             "name": "Сметана 20%",
       17:             "price": "25"
       18:         },
       19:         "5": {
       20:             "name": "Кефір 1%",
       21:             "price": "19"
       22:         },
       23:         "6": {
       24:             "name": "Вода газована",
       25:             "price": "18"
       26:         },
       27:         "7": {
       28:             "name": "Печиво \"Весна\"",
       29:             "price": "14"
       30:         }
       31:     }
       32: }


     Додаток В
     Повний код програми
       001: #!/usr/bin/env php
       002: <?php
       003: 
       004: class Product
       005: {
       006:     public function __construct(
       007:         public int $id,
       008:         public string $name,
       009:         public float $price
       010:     ) {}
       011: }
       012: 
       013: class GroceryStore
       014: {
       015:     private array $products = [];
       016:     private ?string $username = null;
       017:     private ?int $userAge = null;
       018: 
       019:     public function __construct(private string $filePath = 'task3-products.json')
       020:     {
       021:         $this->loadProducts();
       022:     }
       023: 
       024:     private function loadProducts(): void
       025:     {
       026:         $json = file_get_contents($this->filePath);
       027:         $data = json_decode($json, true);
       028:         foreach ($data['Items'] as $id => $item) {
       029:             $this->products[] = new Product((int)$id, $item['name'], $item['price']);
       030:         }
       031:     }
       032: 
       033:     private function strLen($str)
       034:     {
       035:         $chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);
       036:         return count($chars);
       037:     }
       038: 
       039:     private function getMaxNameLength(): int
       040:     {
       041:         return max(array_map(fn($p) => $this->strLen($p->name), $this->products));
       042:     }
       043: 
       044:     private function showMenu(): void
       045:     {
       046:         echo "################################\n";
       047:         echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
       048:         echo "################################\n";
       049:         echo "1 Вибрати товари\n";
       050:         echo "2 Отримати підсумковий рахунок\n";
       051:         echo "3 Налаштувати свій профіль\n";
       052:         echo "0 Вийти з програми\n";
       053:     }
       054: 
       055:     private function showProducts(): void
       056:     {
       057:         $maxLen = $this->getMaxNameLength();
       058:         echo "№  НАЗВА" . str_repeat(" ", $maxLen - 5) . "  ЦІНА\n";
       059:         foreach ($this->products as $p) {
       060:             echo $p->id . "  " . $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  " . $p->price . "\n";
       061:         }
       062:         echo "-----------------\n0  ПОВЕРНУТИСЯ\n";
       063:     }
       064: 
       065:     private function showCart(array $cart): void
       066:     {
       067:         $maxLen = $this->getMaxNameLength();
       068:         echo "У КОШИКУ:\nНАЗВА" . str_repeat(" ", $maxLen - 5) . "  КІЛЬКІСТЬ\n";
       069:         foreach ($this->products as $i => $p) {
       070:             if ($cart[$i] > 0) {
       071:                 echo $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  " . $cart[$i] . "\n\n";
       072:             }
       073:         }
       074:     }
       075: 
       076:     private function configureProfile(): void
       077:     {
       078:         $firstTry = true;
       079:         do {
       080:             if (!$firstTry) {
       081:                 echo "Імʼя користувача не може бути порожнім і повинно містити хоча б одну літеру.\n";
       082:             }
       083:             $name = readline("Ваше імʼя: ");
       084:             $firstTry = false;
       085:         } while (!preg_match('/\p{L}/u', $name));
       086: 
       087:         $this->username = $name;
       088: 
       089:         $firstTry = true;
       090:         do {
       091:             if (!$firstTry) {
       092:                 echo "Користувач не може бути молодшим 7-ми або старшим 150-ти років\n";
       093:             }
       094:             $age = (int)readline("Ваш вік: ");
       095:             $firstTry = false;
       096:         } while ($age < 7 || $age > 150);
       097: 
       098:         $this->userAge = $age;
       099:         echo "Профіль встановлено: {$this->username}, {$this->userAge} років\n\n";
       100:     }
       101: 
       102:     private function checkout(array $cart): void
       103:     {
       104:         $maxLen = $this->getMaxNameLength();
       105:         $total = 0;
       106:         echo "№  НАЗВА" . str_repeat(" ", $maxLen - 5) . "  ЦІНА  КІЛЬКІСТЬ  ВАРТІСТЬ\n";
       107:         $n = 1;
       108:         foreach ($this->products as $i => $p) {
       109:             if ($cart[$i] > 0) {
       110:                 $qty = $cart[$i];
       111:                 echo "$n  " . $p->name . str_repeat(" ", $maxLen - $this->strLen($p->name)) . "  ";
       112:                 echo $this->products[$i]->price . str_repeat(" ", 4 - $this->strLen($this->products[$i]->price)) . "  ";
       113:                 echo $cart[$i] . str_repeat(" ", 9 - $this->strLen($cart[$i])) . "  ";
       114:                 echo $qty * $p->price . "\n";
       115:                 $total += $qty * $p->price;
       116:                 $n++;
       117:             }
       118:         }
       119:         echo "РАЗОМ ДО СПЛАТИ: $total\n\n";
       120:     }
       121: 
       122:     public function run(): void
       123:     {
       124:         $cart = array_fill(0, count($this->products), 0);
       125:         while (true) {
       126:             $this->showMenu();
       127:             $choice = readline("Введіть команду: ");
       128: 
       129:             switch ((int)$choice) {
       130:                 case 1:
       131:                     while (true) {
       132:                         $this->showProducts();
       133:                         $itemId = (int)readline("Виберіть товар: ");
       134:                         if ($itemId === 0) break;
       135: 
       136:                         if ($itemId < 1 || $itemId > count($this->products)) {
       137:                             echo "ПОМИЛКА! Неправильний номер товару\n";
       138:                             continue;
       139:                         }
       140: 
       141:                         $amount = (int)readline("Введіть кількість, штук: ");
       142:                         if ($amount < 0 || $amount > 100) {
       143:                             echo "ПОМИЛКА! Невірна кількість\n";
       144:                             continue;
       145:                         }
       146: 
       147:                         $index = $itemId - 1;
       148:                         $cart[$index] = $amount;
       149:                         if ($amount === 0) {
       150:                             echo "ВИДАЛЯЮ З КОШИКА\n";
       151:                         } else {
       152:                             $this->showCart($cart);
       153:                         }
       154:                     }
       155:                     break;
       156: 
       157:                 case 2:
       158:                     $this->checkout($cart);
       159:                     break;
       160: 
       161:                 case 3:
       162:                     $this->configureProfile();
       163:                     break;
       164: 
       165:                 case 0:
       166:                     echo "До побачення!\n";
       167:                     return;
       168: 
       169:                 default:
       170:                     echo "ПОМИЛКА! Введіть правильну команду\n";
       171:             }
       172:         }
       173:     }
       174: }
       175: 
       176: $app = new GroceryStore();
       177: $app->run();
       178:
       
     16
     
     
