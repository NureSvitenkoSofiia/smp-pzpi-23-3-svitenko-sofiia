Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра Програмної інженерії



Звіт
З практичної роботи №1
з дисципліни «Скриптові мови програмування»









Виконав									Перевірив
ст.гр ПЗПІ-23-3 Світенко. С. М.					ст. в. Сокорчук І.П.







Харків 2025
1.1  Мета роботи
     
     
     Засвоїти базовий синтаксис, умовні конструкції у ході написання Bash-скриптів, з дотриманням заданих вимог.
     
     
1.2  Постановка задачі:
     В ході даного практичного заняття необхідно написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу. Приклад: 
     *  
    ###  
   *****  
  #######  
 *********  
    ###  
   *****  
  #######  
 *********  
    ###  
    ###  
***********  
     
     Обмеження, яких слід дотримуватись у ході виконання практичної роботи: 
     ‒ ялинка повинна бути симетричною;
     ‒ яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#». Приклад:
*
###
*****
#######
     ‒ ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу;
     ‒ висота стовбура та товщина снігу мають бути завжди такі, як у прикладі;
     ‒ висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску;
     ‒ параметри скрипта повинні мати додатнє значення;
     ‒ вказані значення повинні округлятися до потрібних у меншу сторону;
     ‒ якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес;
     ‒ у скрипті потрібно обовʼязково використати такі конструкції:
     if ... then ... fi  
     while ... do ... done  
     until ... do ... done  
     for ... in .. do ... done  
     for ((...)); do ... done  
     ‒ у скрипті також потрібно використати функцію;
     ‒ ім’я скрипта: ~/{імʼя-облікового-запису}-task1;
     ‒ приклад виклику скрипта: ~/pzpiz-26-7-shukhevych-roman-task1 16 11;
     ‒ файл скрипта повинен бути виконуваним файлом для усіх користувачів системи;
     ‒ право редагувати файл скрипта повинен мати лише власник скрипта.
     
     
1.3  Написання Bash скрипту
1.3.1 Обробка аргументів та їх перевірка 
     
     
     Скрипт має приймати рівно два додатних аргументи, причому висота повинна бути більшою за 7, а ширина – на одиницю меншою за висоту. Важливо дотримуватися правила округлення вниз: якщо висота є непарною, її необхідно зменшити на одиницю, а якщо ширина парна – також зменшити на один. Лише після цих коригувань слід перевіряти відповідність параметрів вимогам задачі.
     Згідно до умов код матиме такий вигляд:
       01: #!/bin/bash
       02: ht=$1
       03: ws=$2
       04: 
       05: if [ $# -eq 0 ]; then
       06:   echo "немає аргументів" >&2
       07:   exit 1
       08: fi
       09: 
       10: if (( ht % 2 != 0 )); then
       11:   ht=$(($ht - 1))
       12: fi
       13: 
       14: if (( $ws % 2 == 0 )); then
       15:   ws=$(($ws - 1))
       16: fi
       17: 
       18: printBase(){
       19:   spaceCount=$((($ws - 3)/2))
       20:   i=0
       21:   padding=""
       22: 
       23:   while [ $i -ne $spaceCount ]; do
       24:       padding="$padding " 
       25:       i=$((i + 1))
       26:   done
       27: 
       28:   brackets='###'
       29:   for i in {0,1}; do
       30:       echo "$padding$brackets"
       31:   done
       32: }
       33: 
       34: printBottom(){
       35:   i=0
       36:   cur=""
       37:   until [ $i -eq $(($ws)) ]; do
       38:       cur="$cur*"
       39:       i=$((i + 1))
       40:   done
       41: 
       42:   echo "$cur"
       43: }
       44: 
       45: if [[ $ht -le 0 || $ws -le 0 ]]; then
       46:   echo "повинні бути позитивні значення" >&2
       47:   exit 2
       48: fi
       49: 
       50: if [[ $ht -le 7 ]]; then
       51:   echo "висота має бути більша за 7" >&2
       52:   exit 3
       53: fi
       54: 
       55: if [ $ws -ne $(($ht - 1)) ]; then
       56:   echo "за таких умов неможливо побудувати ялинку" >&2
       57:   exit 4
       58: fi
     У цьому коді спочатку зчитуються значення висоти та ширини з аргументів командного рядка. Далі йде перевірка: якщо аргументів немає, скрипт одразу повідомляє про це у потік помилок і завершує роботу. Після цього відбувається коригування параметрів – якщо висота непарна, її зменшують на одиницю, а якщо ширина парна, її також зменшують на одиницю. Далі йде серія перевірок: чи обидва числа додатні, чи висота більша за 7, і чи ширина дорівнює висоті мінус один. Якщо якась із цих умов не виконується, скрипт виводить відповідне повідомлення про помилку та завершує виконання з певним кодом.
     Окрім перевірок, у коді є дві допоміжні функції для побудови частин фігури. Одна з них формує верхню частину з двох рядків символів ###, які центруються відносно ширини, а друга створює нижній рядок із зірочок, довжина якого дорівнює ширині. Таким чином, скрипт спочатку перевіряє та коригує вхідні дані, а потім може використовувати ці функції для побудови потрібної фігури згідно з умовами задачі.
     
     
1.3.2 Логіка «побудови» ялинки
     
     
     Спочатку визначається, скільки рядків буде в кожній секції ялинки (sectionHeight), щоб рівномірно розподілити висоту між двома секціями. Змінна «symbW» задає початкову кількість символів у першому рядку секції (спочатку один символ). Далі запускається цикл по секціях: таких секцій дві, і після завершення першої висота другої зменшується на один, а ширина рядка скидається до трьох символів.
     Всередині кожної секції є цикл по рядках. Для кожного рядка обчислюється, скільки пробілів потрібно додати зліва, щоб вирівняти рядок по центру відносно заданої ширини (paddingWidth). Потім формується рядок з потрібної кількості символів: символи в рядках чергуються між «*» і «#», що створює ефект шарування. Кількість символів у кожному наступному рядку збільшується на два, завдяки чому ялинка розширюється донизу. Після завершення секції зменшується висота наступної секції та скидається ширина рядка, щоб створити характерний «ступінчастий» вигляд.
     Стовбур ялинки малюється функцією «printBase»: вона двічі виводить по центру три символи «#», додаючи потрібну кількість пробілів зліва для вирівнювання.
     Шар снігу знизу створює функція «printBottom»: вона формує один широкий рядок із зірочок «*», довжина якого дорівнює ширині ялинки.
     Після побудови основної частини ялинки скрипт викликає функції для додавання основи (printBase) і нижнього рядка (printBottom). Такий підхід дозволяє отримати симетричну, багатоярусну ялинку з правильним центруванням рядків і чергуванням символів, що додає декоративності.
       60: sectionHeight=$(( ($ht - 3) / 2 + 1))
       61: treeSymbol='*'
       62: symbW=1
       63: 
       64: for (( sectIndex=0; sectIndex < 2; sectIndex++ )); do
       65:     for (( rowIndex=0; rowIndex < $sectionHeight; rowIndex++ )); do
       66:         paddingWidth=$(( ($ws - $symbW) / 2 ))
       67:         padding=""
       68: 
       69:         for (( padIndex=0; padIndex < $paddingWidth; padIndex++ )); do
       70:             padding+=" "
       71:         done
       72:         
       73:         treeRow=""
       74:         for (( symIndex=0; symIndex < $symbW; symIndex++ )); do
       75:             treeRow+="$treeSymbol"
       76:         done
       77:         
       78:         echo "$padding$treeRow"
       79:         
       80:         symbW=$(( $symbW + 2 ))
       81:         
       82:         if [[ $treeSymbol == "#" ]]; then
       83:             treeSymbol='*'
       84:         else 
       85:             treeSymbol='#'
       86:         fi
       87:     done
       88:     sectionHeight=$((sectionHeight - 1))
       89:     symbW=3
       90: 
       91: done
       92: 
       93: printBase
       94: printBottom	
     
     
1.4  Тестування програми
     
     
     Щоб переконатися у коректності роботи скрипта, спробуємо запустити його з різними вхідними даними. Якщо ввести занадто малу висоту або невірне співвідношення висоти й ширини, отримаємо відповідні повідомлення про помилки, наприклад:
       svite@SOFIA-ACER MINGW64 /f/github/smp-pzpi-23-3-svitenko-sofiia/Pract1/smp-pzpi-23-3-svitenko-sofiia-pract1-code (main)
       $ ./code-pz.bash 2 4
       Висота має бути більша за 7
       
       svite@SOFIA-ACER MINGW64 /f/github/smp-pzpi-23-3-svitenko-sofiia/Pract1/smp-pzpi-23-3-svitenko-sofiia-pract1-code (main)
       $ ./code-pz.bash 11 11
       За таких умов неможливо побудувати ялинку
       
       svite@SOFIA-ACER MINGW64 /f/github/smp-pzpi-23-3-svitenko-sofiia/Pract1/smp-pzpi-23-3-svitenko-sofiia-pract1-code (main)
       $ ./code-pz.bash 11 12
       За таких умов неможливо побудувати ялинку

     При правильних параметрах скрипт формує симетричну ялинку, у якій кожен ярус виглядає як рівнобедрений трикутник. Символи у рядках чергуються між зірочками та ґратками. Яруси розташовані один під одним з поступовим розширенням донизу, а стовбур і «шар снігу» внизу гармонійно завершують композицію. Кожен рядок вирівнюється по центру, завдяки чому ялинка виглядає пропорційною незалежно від заданої ширини. Ширина снігового шару точно відповідає ширині ялинки, підкреслюючи цілісність фігури.
       svite@SOFIA-ACER MINGW64 /f/github/smp-pzpi-23-3-svitenko-sofiia/Pract1/smp-pzpi-23-3-svitenko-sofiia-pract1-code (main)
       $ ./code-pz.bash 12 11
            *
           ###
          *****
         #######
        *********
           ###
          *****
         #######
        *********
           ###
           ###
       ***********
     Як бачимо, скрипт повернув симетричну ялинку, яруси якої є рівнобедреними трикутниками, ширина ярусів не є більшою за ширину снігу – 2, а також символи в ялинці чергуються.
     
     
1.5  Висновок
     
     
     У процесі виконання завдання вдалося попрактикуватися у написанні Bash-скриптів, освоїти базовий синтаксис, умовні конструкції, роботу з циклами та потоками виведення, а також реалізувати побудову ялинки згідно з усіма заданими критеріями.

     ДОДАТОК А
     Повний код програми
       01: #!/bin/bash
       02: ht=$1
       03: ws=$2
       04: 
       05: if [ $# -eq 0 ]; then
       06:   echo "немає аргументів" >&2
       07:   exit 1
       08: fi
       09: 
       10: if (( ht % 2 != 0 )); then
       11:   ht=$(($ht - 1))
       12: fi
       13: 
       14: if (( $ws % 2 == 0 )); then
       15:   ws=$(($ws - 1))
       16: fi
       17: 
       18: printBase(){
       19:   spaceCount=$((($ws - 3)/2))
       20:   i=0
       21:   padding=""
       22: 
       23:   while [ $i -ne $spaceCount ]; do
       24:       padding="$padding " 
       25:       i=$((i + 1))
       26:   done
       27: 
       28:   brackets='###'
       29:   for i in {0,1}; do
       30:       echo "$padding$brackets"
       31:   done
       32: }
       33: 
       34: printBottom(){
       35:   i=0
       36:   cur=""
       37:   until [ $i -eq $(($ws)) ]; do
       38:       cur="$cur*"
       39:       i=$((i + 1))
       40:   done
       41: 
       42:   echo "$cur"
       43: }
       44: 
       45: if [[ $ht -le 0 || $ws -le 0 ]]; then
       46:   echo "повинні бути позитивні значення" >&2
       47:   exit 2
       48: fi
       49: 
       50: if [[ $ht -le 7 ]]; then
       51:   echo "висота має бути більша за 7" >&2
       52:   exit 3
       53: fi
       54: 
       55: if [ $ws -ne $(($ht - 1)) ]; then
       56:   echo "за таких умов неможливо побудувати ялинку" >&2
       57:   exit 4
       58: fi
       59: 
       60: sectionHeight=$(( ($ht - 3) / 2 + 1))
       61: treeSymbol='*'
       62: symbW=1
       63: 
       64: for (( sectIndex=0; sectIndex < 2; sectIndex++ )); do
       65:     for (( rowIndex=0; rowIndex < $sectionHeight; rowIndex++ )); do
       66:         paddingWidth=$(( ($ws - $symbW) / 2 ))
       67:         padding=""
       68: 
       69:         for (( padIndex=0; padIndex < $paddingWidth; padIndex++ )); do
       70:             padding+=" "
       71:         done
       72:         
       73:         treeRow=""
       74:         for (( symIndex=0; symIndex < $symbW; symIndex++ )); do
       75:             treeRow+="$treeSymbol"
       76:         done
       77:         
       78:         echo "$padding$treeRow"
       79:         
       80:         symbW=$(( $symbW + 2 ))
       81:         
       82:         if [[ $treeSymbol == "#" ]]; then
       83:             treeSymbol='*'
       84:         else 
       85:             treeSymbol='#'
       86:         fi
       87:     done
       88:     sectionHeight=$((sectionHeight - 1))
       89:     symbW=3
       90: 
       91: done
       92: 
       93: printBase
       94: printBottom


     ДОДАТОК Б
     Відеозапис
     Посилання на запис відеозахисту: https://youtu.be/LLGLyCeMgFU
0:01 — Вступ, представлення роботи та студентки
0:14 — Мета: засвоєння умовних конструкцій Bash, задача — ялинка з двох ярусів, стовбура і снігу
0:32 — Обмеження: асиметрія, рівнобедрені трикутники, чергування «*» і «#»
0:52 — Параметри: висота, ширина, товщина снігу — задаються, мають бути додатні, округлення вниз, перевірка
1:21 — Вимоги: використання конструкцій, функцій, структурування звіту, додаток з кодом
1:58 — Демонстрація: правильні параметри — ялинка, неправильні — помилка
2:27 — Перевірка: скрипт реагує на різні аргументи, повідомляє про помилки
2:50 — Пояснення коду: збереження аргументів, перевірка наявності, парності, корекція
4:02 — printBase: малює основу (3 решітки, центрування)
5:06 — printButton: малює нижній ряд (зірочки, ширина ялинки)
5:54 — Перевірки: від’ємні/нульові значення, висота ≥ 7, співвідношення ширини і висоти
6:38 — Висота секцій, початковий символ
7:06 — Цикли: побудова секцій, центрування, чергування символів
8:15 — Перехід до другої секції, корекція висоти і ширини
9:06 — Виклик функцій для основи та нижнього ряду
9:18 — Підсумок: перевірки, автоматичне регулювання, симетрична ялинка
9:45 — Завершення, подяка
       
     
     11
     
     
     
     
     
